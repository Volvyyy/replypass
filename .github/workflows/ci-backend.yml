name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci-backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  workflow_dispatch:

defaults:
  run:
    working-directory: backend

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test & Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Black formatting check
      run: black --check --diff .

    - name: Run isort import sorting check
      run: isort --check-only --diff .

    - name: Run mypy type checking
      run: mypy app/
      continue-on-error: true  # mypy strictモードのため

    - name: Run ruff linting
      run: ruff check .

    - name: Run tests with pytest
      run: |
        pytest --cov=app --cov-report=xml --cov-report=term-missing
      env:
        ENVIRONMENT: testing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Run safety check for known vulnerabilities
      run: safety check --file requirements.txt

    - name: Run bandit security linter
      run: bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: backend/bandit-report.json

    - name: Run Semgrep security analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: auto
        generateSarif: "1"
      continue-on-error: true

  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: backend
        file: backend/Dockerfile
        push: false
        tags: replypass-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container \
          -p 8000:8000 \
          -e ENVIRONMENT=testing \
          replypass-backend:test
        
        # Wait for container to start
        sleep 10
        
        # Health check
        curl -f http://localhost:8000/health || exit 1
        
        # Stop container
        docker stop test-container

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/develop'
    timeout-minutes: 20
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: backend
        file: backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY }}/replypass-backend:staging
          ${{ secrets.CONTAINER_REGISTRY }}/replypass-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          docker pull ${{ secrets.CONTAINER_REGISTRY }}/replypass-backend:staging
          docker stop replypass-backend-staging || true
          docker rm replypass-backend-staging || true
          docker run -d --name replypass-backend-staging \
            -p 8000:8000 \
            --env-file /opt/replypass/.env.staging \
            ${{ secrets.CONTAINER_REGISTRY }}/replypass-backend:staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 30
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: backend
        file: backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY }}/replypass-backend:latest
          ${{ secrets.CONTAINER_REGISTRY }}/replypass-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          docker pull ${{ secrets.CONTAINER_REGISTRY }}/replypass-backend:latest
          docker stop replypass-backend || true
          docker rm replypass-backend || true
          docker run -d --name replypass-backend \
            -p 8000:8000 \
            --restart unless-stopped \
            --env-file /opt/replypass/.env.production \
            ${{ secrets.CONTAINER_REGISTRY }}/replypass-backend:latest

  database-migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Supabase CLI
      run: npm install -g @supabase/cli

    - name: Run database migrations
      run: |
        cd backend
        supabase db push --linked
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}