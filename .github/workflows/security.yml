name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: write

jobs:
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
        # CodeQL supports: 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # Override language selection by uncommenting this and choosing your languages
        # languages: javascript, python
        
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: +security-and-quality

    # If the Autobuild fails for JavaScript/TypeScript, remove it and uncomment the following
    # three lines and modify them (or add more) to build your code if your project uses
    # a compiled language
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
        deny-licenses: GPL-2.0, GPL-3.0

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@v3.63.2-rc.0
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Scan for secrets with GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for organizations

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Check Frontend Licenses
      run: |
        cd frontend
        npx license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD" --excludePrivatePackages

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install pip-licenses

    - name: Check Backend Licenses
      run: |
        cd backend
        pip install -r requirements.txt
        pip-licenses --allow-only="MIT;Apache Software License;BSD License;ISC License (ISCL);Apache 2.0;Apache License;BSD"

  vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner (Filesystem)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Setup Node.js for npm audit
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Frontend npm audit
      run: |
        cd frontend
        npm ci
        npm audit --audit-level=moderate

    - name: Setup Python for backend security
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Backend security audit
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install safety pip-audit
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true
        pip-audit --format=json --output=pip-audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          backend/safety-report.json
          backend/pip-audit-report.json
        retention-days: 30

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install and audit frontend packages
      run: |
        cd frontend
        npm ci
        npx audit-ci --moderate

    - name: Run OSSF Scorecard
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: results.sarif
        results_format: sarif
        repo_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload OSSF Scorecard results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    timeout-minutes: 15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: backend
        file: backend/Dockerfile
        push: false
        tags: replypass-backend:security-scan
        load: true

    - name: Run Trivy vulnerability scanner (Docker)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'replypass-backend:security-scan'
        format: 'sarif'
        output: 'docker-trivy-results.sarif'

    - name: Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'docker-trivy-results.sarif'

    - name: Run Hadolint Dockerfile linter
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: backend/Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true

    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-results.sarif